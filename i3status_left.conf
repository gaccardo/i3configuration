# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
        colors = true
        interval = 5
}

#order += "ipv6"
#order += "disk /"
#order += "run_watch DHCP"
#order += "path_exists VPN"
#order += "wireless _first_"
#order += "ethernet tun0"
#order += "ethernet tun1"
#order += "battery 0"
order += "spotify"
#order += "cloud_watch dev_nginx"
#order += "cloud_watch dev_routers"
#order += "cloud_watch dev_eventloop"
#order += "group net"
order += "group prod_barrier"
order += "group dev_barrier"
order += "group auto_scaling"
order += "load"
order += "cpu_temperature 0"
order += "cpu_temperature 1"
order += "tztime local"

group net {
	wireless _first_ {
	        format_up = "W: %ip"
	        format_down = "W: down"
	}

	ethernet tun0 {
	        # if you use %speed, i3status requires root privileges
	        format_up = "DSPv1: %ip"
	        format_down = "DSPv1: down"
	}

	ethernet tun1 {
	        # if you use %speed, i3status requires root privileges
	        format_up = "DSPv2: %ip"
	        format_down = "DSPv2: down"
	}
}

#run_watch VPN {
#        pidfile = "/var/run/vpnc/pid"
#}

path_exists VPN {
	path = "/proc/sys/net/ipv4/conf/tun1"
}

tztime local {
        format = "%Y-%m-%d %H:%M:%S"
}

load {
        format = "%1min"
}

disk "/" {
        format = "Free: %avail"
}

cpu_temperature 0 {
	format = "C: %degreesº"
	path = "/sys/class/hwmon/hwmon2/temp1_input"
	max_threshold = 55
}

cpu_temperature 1 {
	format = "V: %degreesº"
	path = "/sys/class/hwmon/hwmon0/temp1_input"
	max_threshold = 95
}

group auto_scaling {
	cycle = 30
	format = "Dev.{output}"

	cloud_watch "dev_routers" {
		format = "Routers: {integer}"
		metric = "AWS/ELB:LoadBalancerName:RoutersDevBalancer:HealthyHostCount:60:Average"
	}

	cloud_watch "dev_nginx" {
		format = "Nginx: {integer}"
		metric = "AWS/ELB:LoadBalancerName:BRNginxDevelopmentBalancer:HealthyHostCount:60:Average"
	}

	cloud_watch "dev_eventloop" {
		format = "EventLoop: {integer}"
		metric = "AWS/ELB:LoadBalancerName:EventLoopDevelopmentBalancer:HealthyHostCount:60:Average"
	}

}

group dev_barrier {
	cycle = 30
	format = "Dev.B.{output}"

	barrier "dev_development" {
		format = "development: {state}"
		data = "development:10.1.150.10:5000"
	}
}

group prod_barrier {
	cycle = 30
	format = "Prod.B.{output}"

	barrier "prod_mopub" {
		format = "mopub: {state}"
		data = "mopub:10.1.2.10:5000"
	}
	barrier "prod_bidswitch" {
		format = "bidswitch: {state}"
		data = "bidswitch:10.1.2.10:5000"
	}
	barrier "prod_smaato" {
		format = "smaato: {state}"
		data = "smaato:10.1.2.10:5000"
	}
	barrier "prod_pubmatic" {
		format = "pubmatic: {state}"
		data = "pubmatic:10.1.2.10:5000"
	}
	barrier "prod_adx" {
		format = "adx: {state}"
		data = "adx:10.1.2.10:5000"
	}
}
